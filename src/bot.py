import logging
import time
import threading
import os
from collections import defaultdict
from functools import wraps

import asyncio
import sentry_sdk
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Command, IDFilter
from aiogram.dispatcher.filters.filters import AndFilter

from src.constants import (
    ADMIN_IDS,
    COMMAND_HELP,
    COMMAND_ROLL,
    COMMAND_START,
    COMMAND_STATS,
    COMMAND_USER,
    COMMAND_GAME_LEADERS,
    COMMAND_ROUND_LEADERS,
)
from src.leaderboard import LeaderBoard
from src.utils.logs import async_log_exception, pretty_time_delta
from src.utils.misc import prepare_str


logging.basicConfig(
    level=logging.DEBUG,
)
log = logging.getLogger(__name__)


class Manager:

    def __init__(self, token: str, sentry_token: str = None):
        self.bot = Bot(
            token=token,
            timeout=3.0,
        )
        self.dispatcher = Dispatcher(
            bot=self.bot,
        )
        sentry_sdk.init(
            dsn=sentry_token,
            traces_sample_rate=1.0,
        )

        # Game rules
        self.board = LeaderBoard()
        self.update_cycle = 0
        self.round_duration = 2 * 60
        self.last_update = time.time()

        # Runtime stats
        self.counter = 0
        self.unique_chats = set()
        self.started_at = time.time()
        self.func_counter = defaultdict(int)
        self.func_average_resp_time = defaultdict(float)  # milliseconds
        self.func_resp_time = defaultdict(list)  # milliseconds
        self.max_list_size = 1000

    def update_leader_board(self):
        while True:
            time.sleep(self.round_duration)

            self.board.new_round()
            self.update_cycle += 1
            self.last_update = time.time()

    def run(self):
        self.set_up_commands()

        t = threading.Thread(target=self.update_leader_board, daemon=True)
        t.start()

        executor.start_polling(
            dispatcher=self.dispatcher,
            skip_updates=True,
        )

    def increment_counter(self, f):
        """Wrap any important function with this."""

        @wraps(f)
        async def inner(message: types.Message, *args, **kwargs):
            fn = f.__name__
            self.counter += 1
            self.func_counter[fn] += 1

            # Calculate response time
            t0 = time.time()
            res = await f(*args, message, **kwargs)
            dt = (time.time() - t0) * 1000
            self.func_average_resp_time[fn] += dt

            # Store only last X values
            self.func_resp_time[fn] = self.func_resp_time[fn][-(self.max_list_size - 1):]
            self.func_resp_time[fn].append(dt)

            chat_id = message.chat.id
            self.unique_chats.add(chat_id)

            return res

        return inner

    def set_up_commands(self):
        self.dispatcher.register_message_handler(
            self.increment_counter(self.show_welcome),
            Command(commands=[COMMAND_START]),
        )
        self.dispatcher.register_message_handler(
            self.increment_counter(self.show_help),
            Command(commands=[COMMAND_HELP]),
        )

        # –ò–≥—Ä–∞
        self.dispatcher.register_message_handler(
            self.increment_counter(self.roll_once),
            Command(commands=[COMMAND_ROLL]),
        )
        self.dispatcher.register_message_handler(
            self.increment_counter(self.roll_stats_round),
            Command(commands=[COMMAND_ROUND_LEADERS]),
        )
        self.dispatcher.register_message_handler(
            self.increment_counter(self.roll_stats_total),
            Command(commands=[COMMAND_GAME_LEADERS]),
        )

        # –ü—Ä–æ—á–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, admin only
        self.dispatcher.register_message_handler(
            self.show_user_info,
            AndFilter(
                Command(commands=[COMMAND_USER]),
                IDFilter(chat_id=ADMIN_IDS),
            ),
        )
        self.dispatcher.register_message_handler(
            self.show_stats,
            AndFilter(
                Command(commands=[COMMAND_STATS]),
                IDFilter(chat_id=ADMIN_IDS),
            ),
        )

    @async_log_exception
    async def show_welcome(self, message: types.Message):
        text = [
            '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –±—Ä–æ—Å–∞–Ω–∏—è —à–∞—Ä–æ–≤. –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å —à–∞—Ä—ã —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –∑–∞ 2 –º–∏–Ω—É—Ç—ã.',
            '–ß–µ–º –±–æ–ª—å—à–µ *–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ* –≤—ã–ø–∞–≤—à–∏—Ö –∫–µ–≥–ª—å - —Ç–µ–º –ª—É—á—à–µ.',
            '',
            f'–ù–∞–∂–º–∏ /{COMMAND_HELP} —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥.',
            '',
            f'–ò–ª–∏ –Ω–∞–∂–º–∏ /{COMMAND_ROLL} —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –±—Ä–æ—Å–∏—Ç—å —à–∞—Ä—ã.',
        ]
        await message.answer(
            text=prepare_str(text=text),
            parse_mode=types.ParseMode.MARKDOWN,
        )

    @async_log_exception
    async def roll_once(self, message: types.Message):
        chat_id = message.chat.id
        now = time.time()

        if not self.board.can_add_result(chat_id=chat_id):
            text = [
                f'*–ù–µ–ª—å–∑—è –±—Ä–æ—Å–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ!*',
                '',
            ]
            # –ü–æ—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
            dt = (self.last_update + self.round_duration) - now
            if dt < 0:
                # –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º!
                msg = '–í—ã —Å–∫–æ—Ä–æ —Å–º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!'
                log.error('something wrong with update thread!')
            else:
                msg = f'–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤ –Ω–æ–≤–æ–º —Ä–∞—É–Ω–¥–µ —á–µ—Ä–µ–∑ {pretty_time_delta(dt)}!'
            text.append(msg)

            return await message.answer(
                text=prepare_str(text=text),
                parse_mode=types.ParseMode.MARKDOWN,
            )

        # Roll
        rolls = [await message.answer_dice(emoji='üé≥') for _ in range(3)]

        val = 1
        for v in rolls:
            val *= v["dice"]["value"]

        # Wait for animation
        await asyncio.sleep(3)

        pos = self.board.add_result(
            chat_id=chat_id,
            full_name=message.chat.full_name,
            result=val,
        )

        text = [
            f'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *{val}*',
            f'–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ *{pos}*',
            '',
            f'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞: /{COMMAND_ROUND_LEADERS}',
            f'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: /{COMMAND_GAME_LEADERS}',
        ]
        await message.answer(
            text=prepare_str(text=text),
            parse_mode=types.ParseMode.MARKDOWN,
        )

    @async_log_exception
    async def roll_stats_round(self, message: types.Message):
        chat_id = message.chat.id
        stats = self.board.current_stats(chat_id=chat_id)
        if not stats:
            return await message.answer(
                text='–ü–æ–∫–∞ —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.',
                parse_mode=types.ParseMode.MARKDOWN,
            )

        text = [
            '*–¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥*',
            '',
        ]

        for pos, item in stats:
            msg_pos = f'*{pos}*' if pos <= 3 else f'{pos}'
            msg = f'{msg_pos}. [[{item["full_name"]}]] {item["result"]}'
            text.append(msg)

        dt = (self.last_update + self.round_duration) - time.time()
        if dt > 0:
            text.extend([
                '',
                f'–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑: {pretty_time_delta(dt)}',
            ])

        await message.answer(
            text=prepare_str(text=text),
            parse_mode=types.ParseMode.MARKDOWN,
        )

    @async_log_exception
    async def roll_stats_total(self, message: types.Message):
        chat_id = message.chat.id
        stats = self.board.total_stats(chat_id=chat_id)
        if not stats:
            return await message.answer(
                text='–ü–æ–∫–∞ —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.',
                parse_mode=types.ParseMode.MARKDOWN,
            )

        text = [
            '*–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è*',
            '',
        ]

        for pos, item in stats:
            msg_pos = f'*{pos}*' if pos <= 3 else f'{pos}'
            msg = f'{msg_pos}. [[{item["full_name"]}]] {item["result"]}'
            text.append(msg)

        await message.answer(
            text=prepare_str(text=text),
            parse_mode=types.ParseMode.MARKDOWN,
        )

    @async_log_exception
    async def show_user_info(self, message: types.Message):
        text = [
            '*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ*',
            '',
            f'–ò–º—è: `{message.chat.full_name}`',
            f'–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞: `{message.chat.id}`',
        ]
        await message.answer(
            text=prepare_str(text=text),
            parse_mode=types.ParseMode.MARKDOWN,
        )

    @async_log_exception
    async def show_help(self, message: types.Message):
        text = [
            '*–ë–æ—É–ª–∏–Ω–≥*',
            '',
            f'/{COMMAND_ROLL} -- –±—Ä–æ—Å–∏—Ç—å —à–∞—Ä—ã.',
            f'/{COMMAND_ROUND_LEADERS} -- –∏—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞.',
            f'/{COMMAND_GAME_LEADERS} -- –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.',
            '',
            '*–ü–æ–º–æ—â—å*',
            '',
            f'/{COMMAND_START} -- –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.',
            f'/{COMMAND_HELP} -- –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑.',
        ]
        if message.chat.id in ADMIN_IDS:
            text.extend([
                '',
                '*–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*',
                '',
                f'/{COMMAND_USER} -- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è.',
                f'/{COMMAND_STATS} -- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞.',
            ])
        await message.answer(
            text=prepare_str(text=text),
            parse_mode=types.ParseMode.MARKDOWN,
        )

    @async_log_exception
    async def show_stats(self, message: types.Message):
        if not self.func_counter:
            return await message.reply(
                text='–°–µ–π—á–∞—Å —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.',
            )

        now = time.time()
        lifetime = pretty_time_delta(now - self.started_at)

        text = [
            '*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*',
            '',
            f'- –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: *{self.counter}*',
            f'- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: *{len(self.unique_chats)}*',
            f'- –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –±–æ—Ç–∞: {lifetime}',
            f'- –¶–∏–∫–ª–æ–≤: {self.update_cycle}, last: {self.last_update}',
            '',
            '*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º*',
            '',
        ]
        total_resp_time = []
        sorted_requests = sorted(self.func_counter.items(), key=lambda i: (i[1], i[0]), reverse=True)
        for (fn, requests) in sorted_requests:
            # AVG resp time
            resp_time = self.func_resp_time[fn]
            total_resp_time.extend(resp_time)
            avg_resp = sum(resp_time) / len(resp_time)

            text.append(f'`{fn}`')
            text.append(f'{requests} requests, {avg_resp:.0f} avg resp time (ms)')
            text.append('')

        # –í—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ ``–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤..``
        total_avg = sum(total_resp_time) / len(total_resp_time)
        text.insert(3, f'- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: *{total_avg:.0f}* (ms)')

        await message.answer(
            text=prepare_str(text=text),
            parse_mode=types.ParseMode.MARKDOWN,
        )


if __name__ == '__main__':
    TG_TOKEN = os.getenv('TG_TOKEN')
    assert TG_TOKEN, 'TG_TOKEN env variable must be set!'

    SENTRY_TOKEN = os.getenv('SENTRY_TOKEN')

    m = Manager(
        token=TG_TOKEN,
    )
    m.run()
